Description: "Running Container-Enabled Microservices on AWS Bootcamp: Lab 2 - Network CloudFormation Template"
Mappings:
  CidrMappings:
    vpc:
      CIDR: "10.0.0.0/16"
    public-subnet-1:
      CIDR: "10.0.1.0/24"
    public-subnet-2:
      CIDR: "10.0.2.0/24"
    private-subnet-1:
      CIDR: "10.0.3.0/24"
    private-subnet-2:
      CIDR: "10.0.4.0/24"

  DomainNameMappings:
    eu-west-1:
      Domain: "eu-west-1.compute.internal"
    us-east-1:
      Domain: "ec2.internal"
    us-east-2:
      Domain: "us-east-2.compute.internal"
    us-west-2:
      Domain: "us-west-2.compute.internal"

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !FindInMap [ CidrMappings, vpc, CIDR ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        -
          Key: "Name"
          Value: "Bootcamp VPC"

  DHCPOptions:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainName: !FindInMap [ DomainNameMappings, !Ref "AWS::Region", Domain ]
      DomainNameServers:
        - AmazonProvidedDNS

  VPCDHCPOptionsAssociation:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      DhcpOptionsId: !Ref DHCPOptions
      VpcId: !Ref VPC

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    DependsOn: "VPC"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    DependsOn:
      - "VPC"
      - "InternetGateway"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    DependsOn: "AttachGateway"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ CidrMappings, public-subnet-1, CIDR ]
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        -
          Key: "Name"
          Value: "PublicSubnet1"

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    DependsOn: "AttachGateway"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ CidrMappings, public-subnet-2, CIDR ]
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        -
          Key: "Name"
          Value: "PublicSubnet2"

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    DependsOn: "AttachGateway"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ CidrMappings, private-subnet-1, CIDR ]
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        -
          Key: "Name"
          Value: "PrivateSubnet1"

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    DependsOn: "AttachGateway"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ CidrMappings, private-subnet-2, CIDR ]
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        -
          Key: "Name"
          Value: "PrivateSubnet2"

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn:
      - "VPC"
      - "AttachGateway"
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: "Name"
          Value: "PublicRouteTable"

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn:
      - "VPC"
      - "NAT"
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: "Name"
          Value: "PrivateRouteTable"

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn:
      - "PublicRouteTable"
      - "AttachGateway"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PrivateRoute:
    Type: "AWS::EC2::Route"
    DependsOn:
      - "PrivateRouteTable"
      - "NAT"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NAT

  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  NAT:
    Type: "AWS::EC2::NatGateway"
    DependsOn: "AttachGateway"
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "ALB Security Group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "8000"
          ToPort: "9000"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          CidrIp: "0.0.0.0/0"

  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: "internet-facing"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LoadBalancerAttributes:
        -
          Key: "idle_timeout.timeout_seconds"
          Value: "60"
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        -
          Key: "Name"
          Value: "ApplicationLoadBalancer"

Outputs:
  VPC:
    Value: !Ref VPC
    Export:
      Name: VPC
  VpcCidr:
    Value: !FindInMap [ CidrMappings, vpc, CIDR ]
    Export:
      Name: VpcCidr
  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: PublicSubnet1
  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: PublicSubnet2
  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
    Export:
      Name: PrivateSubnet1
  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
    Export:
      Name: PrivateSubnet2
  ApplicationLoadBalancer:
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: ApplicationLoadBalancer
  ALBDnsName:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: ALBDnsName
  ALBSecurityGroup:
    Value: !GetAtt ALBSecurityGroup.GroupId
    Export:
      Name: ALBSecurityGroup
