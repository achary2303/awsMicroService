Description: "Running Container-Enabled Microservices on AWS Bootcamp: Lab 2 - ECS Cluster CloudFormation Template"
Mappings:
  AWSRegionToAMI:
    eu-west-1: {AMI: ami-95f8d2f3}
    us-east-1: {AMI: ami-275ffe31}
    us-east-2: {AMI: ami-62745007}
    us-west-2: {AMI: ami-62d35c02}
Parameters:
  InstanceType:
    Type: "String"
    Description: "ECS instance type"
    Default: "t2.small"
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: "must be a valid t2 instance type."

  SourceCidr:
    Type: "String"
    Description: "Optional - CIDR/IP range for instance outside access - defaults to 0.0.0.0/0"
    Default: "0.0.0.0/0"

  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances."

Resources:
  BootcampCluster:
    Type: "AWS::ECS::Cluster"

  InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["ec2.amazonaws.com"] },
              "Action": ["sts:AssumeRole"]
            }
          ]
        }
      Path: "/"
      Policies:
        -
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": [
                      "arn:aws:logs:*:*:*"
                  ]
                }
              ]
            }
          }
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          !Ref InstanceRole

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: ECS Server Security Group
      VpcId: !ImportValue VPC
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: !Ref SourceCidr
        -
          IpProtocol: "tcp"
          FromPort: "0"
          ToPort: "65535"
          SourceSecurityGroupId: !ImportValue ALBSecurityGroup

  SysLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 7

  EcsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 7

  CloudformationLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 7

  LaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          install_all:
            - install_cfn
            - install_logs
            - install_ssm
            - configure_ecs
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              group: "root"
              owner: "root"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --configsets install_all --region ${AWS::Region}
                runas=root
              group: root
              mode: '000400'
              owner: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_logs:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/awslogs/state/agent-state

                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${SysLogGroup}
                log_stream_name = {instance_id}/syslog
                datetime_format = %b %d %H:%M:%S

                [/var/log/docker]
                file = /var/log/docker
                log_group_name = ${EcsLogGroup}
                log_stream_name = {instance_id}/docker.log
                datetime_format = %Y-%m-%dT%H:%M:%S.%fZ

                [/var/log/ecs-agent]
                file = /var/log/ecs/ecs-agent*
                log_group_name = ${EcsLogGroup}
                log_stream_name = {instance_id}/ecs-agent.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/ecs-init]
                file = /var/log/ecs/ecs-init*
                log_group_name = ${EcsLogGroup}
                log_stream_name = {instance_id}/ecs-init.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cloud-init.log
                datetime_format =

                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cloud-init-output.log
                datetime_format =

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cfn-init.log
                datetime_format =

                [/var/log/cfn-init-cmd.log]
                file = /var/log/cfn-init-cmd.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cfn-init-cmd.log
                datetime_format =

                [/var/log/cfn-hup.log]
                file = /var/log/cfn-hup.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cfn-hup.log
                datetime_format =

                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cfn-wire.log
                datetime_format =
              group: root
              mode: '000644'
              owner: root
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              group: root
              mode: '000644'
              owner: root
          commands:
            01_create_state_directory:
              command: "mkdir -p /var/awslogs/state"
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                files:
                  - "/etc/awslogs/awslogs.conf"
        install_ssm:
          commands:
            01_install_agent:
              command: !Sub |
                curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o /tmp/amazon-ssm-agent.rpm && yum install -y /tmp/amazon-ssm-agent.rpm
        configure_ecs:
          files:
            /etc/ecs/ecs.config:
              content: !Sub |
                ECS_CLUSTER=${BootcampCluster}
              group: root
              mode: '000644'
              owner: root
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AMI ]
      SecurityGroups:
        - !Ref SecurityGroup
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: "50"
            VolumeType: "gp2"
      UserData:
        Fn::Base64: !Sub |
         #!/bin/bash -xe
         yum update -y
         yum install -y aws-cfn-bootstrap
         /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchConfig --configsets install_all --region ${AWS::Region}
         /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource AutoscalingGroup --region ${AWS::Region}

  AutoscalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier:
        - !ImportValue PublicSubnet1
        - !ImportValue PublicSubnet2
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize: "2"
      MinSize: "2"
      Tags:
        - Key: "Name"
          Value: "ECS Instance"
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: "2"
        Timeout: "PT15M"

Outputs:
  ClusterName:
    Value: !Ref BootcampCluster
    Export:
      Name: EcsClusterName
