Description: "Running Container-Enabled Microservices on AWS Bootcamp: Lab 2 - Jenkins stack CloudFormation Template"
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMI: "ami-b2df2ca4"
    us-west-2:
      AMI: "ami-022b9262"
    eu-west-1:
      AMI: "ami-a7f2acc1"
    us-east-2:
      AMI: "ami-832b0ee6"

Parameters:
  InstanceType:
    Type: "String"
    Description: "ECS instance type"
    Default: "t2.medium"
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: "must be a valid t2 instance type."

  SourceCidr:
    Type: "String"
    Description: "Optional - CIDR/IP range for instance outside access - defaults to 0.0.0.0/0"
    Default: "0.0.0.0/0"

  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances."

  JenkinsRepoName:
    Type: "String"
    Description: "Name of the Jenkins ECR Docker Repository"
    Default: "jenkins"

  AdministratorPassword:
    Type: "String"
    NoEcho: "true"
    MinLength: "5"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"

  S3BucketName:
    Type: "String"
    Description: "Name of the S3 bucket where the source code is stored."

  S3PathPrefix:
    Type: "String"
    Description: "S3 Path where source and scripts are found for the lab."

  BuildJenkinsFlag:
    Type: "String"
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    ConstraintDescription: "must be a boolean value."

  LabName:
    Type: "String"
    Description: "The name of the lab"
    ConstraintDescription: "must be a valid lab name."
    Default: "lab-2-pipeline"
    AllowedValues:
      - lab-1-microservices
      - lab-2-pipeline
      - lab-3-scale
      - lab-4-security

Conditions:
  BuildJenkins: !Equals [ !Ref BuildJenkinsFlag, "true" ]

Resources:
  JenkinsCluster:
    Type: "AWS::ECS::Cluster"

  InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["ec2.amazonaws.com"] },
              "Action": ["sts:AssumeRole"]
            }
          ]
        }
      Path: "/"
      Policies:
        -
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": [
                      "arn:aws:logs:*:*:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["cloudwatch:PutMetricData"],
                  "Resource": ["*"]
                },
                {
                  "Effect": "Allow",
                  "Action": ["ecr:*"],
                  "Resource": ["*"]
                }
              ]
            }
          }
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        - "arn:aws:iam::aws:policy/AWSCodePipelineCustomActionAccess"

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          !Ref InstanceRole

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: ECS Server Security Group
      VpcId: !ImportValue VPC
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: !Ref SourceCidr
        -
          IpProtocol: "tcp"
          FromPort: "0"
          ToPort: "65535"
          SourceSecurityGroupId: !ImportValue ALBSecurityGroup

  SysLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 7

  EcsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 7

  CloudformationLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 7

  JenkinsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 7

  LaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Metadata:
      AWS::CloudFormation::Init:
        configSets: !If [ BuildJenkins,
          install_all: [ "install_cfn", "install_logs", "install_ssm", "configure_ecs", "install_docker_login_helper", "setup_jenkins_home", "install_src", "build_jenkins" ],
          install_all: [ "install_cfn", "install_logs", "install_ssm", "configure_ecs", "install_docker_login_helper", "setup_jenkins_home" ]]
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              group: "root"
              owner: "root"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --configsets install_all --region ${AWS::Region}
                runas=root
              group: root
              mode: '000400'
              owner: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_logs:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/awslogs/state/agent-state

                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${SysLogGroup}
                log_stream_name = {instance_id}/syslog
                datetime_format = %b %d %H:%M:%S

                [/var/log/docker]
                file = /var/log/docker
                log_group_name = ${EcsLogGroup}
                log_stream_name = {instance_id}/docker.log
                datetime_format = %Y-%m-%dT%H:%M:%S.%fZ

                [/var/log/ecs-agent]
                file = /var/log/ecs/ecs-agent*
                log_group_name = ${EcsLogGroup}
                log_stream_name = {instance_id}/ecs-agent.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/ecs-init]
                file = /var/log/ecs/ecs-init*
                log_group_name = ${EcsLogGroup}
                log_stream_name = {instance_id}/ecs-init.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cloud-init.log
                datetime_format =

                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cloud-init-output.log
                datetime_format =

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cfn-init.log
                datetime_format =

                [/var/log/cfn-init-cmd.log]
                file = /var/log/cfn-init-cmd.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cfn-init-cmd.log
                datetime_format =

                [/var/log/cfn-hup.log]
                file = /var/log/cfn-hup.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cfn-hup.log
                datetime_format =

                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cfn-wire.log
                datetime_format =
              group: root
              mode: '000644'
              owner: root
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              group: root
              mode: '000644'
              owner: root
          commands:
            01_create_state_directory:
              command: "mkdir -p /var/awslogs/state"
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                files:
                  - "/etc/awslogs/awslogs.conf"
        install_ssm:
          commands:
            01_install_agent:
              command: !Sub |
                curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o /tmp/amazon-ssm-agent.rpm && yum install -y /tmp/amazon-ssm-agent.rpm
        configure_ecs:
          files:
            /etc/ecs/ecs.config:
              content: !Sub |
                ECS_CLUSTER=${JenkinsCluster}
              group: root
              mode: '000644'
              owner: root
        install_docker_login_helper:
          sources:
            /var/lib/amazon-ecr-credential-helper: "https://github.com/awslabs/amazon-ecr-credential-helper/tarball/v0.1.0"
          files:
            /home/ec2-user/.docker/config.json:
              content: !Sub |
                {
                  "credsStore": "ecr-login"
                }
              mode: "000644"
              owner: "ec2-user"
              group: "ec2-user"
          commands:
            01_change_owner:
              command: chown -R ec2-user:ec2-user /var/lib/amazon-ecr-credential-helper && chown -R ec2-user:ec2-user /home/ec2-user/.docker
            02_build_ecr_credential_helper:
              command: su - ec2-user -c "cd /var/lib/amazon-ecr-credential-helper && make docker"
            03_move_credential_binary:
              command: cp /var/lib/amazon-ecr-credential-helper/bin/local/docker-credential-ecr-login /usr/local/bin/
        setup_jenkins_home:
          commands:
            01_mkdir_jenkins_home:
              command: mkdir -p /var/jenkins_home
            02_permissions_jenkins_home:
              command: chown 1000:1000 /var/jenkins_home
        install_src:
          packages:
            yum:
              jq: []
          sources:
            /home/ec2-user: !Sub https://aws-tc-largeobjects.s3.amazonaws.com/AWS-300-RCM/3.0/${LabName}-src.tar.gz
          commands:
            01_change_owner:
              command: !Sub chown -R ec2-user:ec2-user /home/ec2-user/${LabName}
            02_chmod_files:
              command: !Sub find /home/ec2-user/${LabName} -type d -exec chmod 775 {} \; && find /home/ec2-user/${LabName} -type f -exec chmod 664 {} \; && chmod 775 /home/ec2-user/${LabName}/scripts/*.sh
        build_jenkins:
          commands:
            01_build_jenkins:
              command: !Sub su - ec2-user -c "cd /home/ec2-user/${LabName}/src/jenkins && /home/ec2-user/${LabName}/scripts/build_push_image.sh jenkins ${LabName}"
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AMI ]
      SecurityGroups:
        - !Ref SecurityGroup
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: "50"
            VolumeType: "gp2"
        - DeviceName: "/dev/xvdcz"
          Ebs:
            VolumeSize: "100"
            VolumeType: "gp2"
      UserData:
        Fn::Base64: !Sub |
         #!/bin/bash -xe
         yum update -y
         yum install -y aws-cfn-bootstrap
         /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchConfig --configsets install_all --region ${AWS::Region}
         /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource AutoscalingGroup --region ${AWS::Region}

  AutoscalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier:
        - !ImportValue PublicSubnet1
        - !ImportValue PublicSubnet2
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize: "1"
      MinSize: "1"
      Tags:
        - Key: "Name"
          Value: "Jenkins Instance"
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: "PT20M"

  JenkinsALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !ImportValue ApplicationLoadBalancer
      Port: "80"
      Protocol: "HTTP"
      DefaultActions:
        -
          Type: "forward"
          TargetGroupArn: !Ref JenkinsALBTargetGroup

  JenkinsALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      HealthCheckPath: "/jenkins/login"
      Port: 8080
      Protocol: "HTTP"
      VpcId: !ImportValue VPC
      Tags:
        -
          Key: "Name"
          Value : "JenkinsALBTargetGroup"

  JenkinsTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Volumes:
        -
          Name: "jenkins-home"
          Host:
            SourcePath: "/var/jenkins_home"
        -
          Name: "docker-sock"
          Host:
            SourcePath: "/var/run/docker.sock"
      ContainerDefinitions:
        -
          Name: "jenkins"
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${JenkinsRepoName}:${LabName}
          Cpu: 10
          Memory: 2500
          Essential: true
          Environment:
            -
              Name: "JENKINS_USERNAME"
              Value: "admin"
            -
              Name: "JENKINS_PASSWORD"
              Value: !Ref AdministratorPassword
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref JenkinsLogGroup
              awslogs-region: !Ref "AWS::Region"
          PortMappings:
            -
              ContainerPort: "8080"
              HostPort: "0"
              Protocol: "tcp"
          MountPoints:
            -
              SourceVolume: "jenkins-home"
              ContainerPath: "/var/jenkins_home"
            -
              SourceVolume: "docker-sock"
              ContainerPath: "/var/run/docker.sock"

  JenkinsService:
    Type: "AWS::ECS::Service"
    DependsOn: AutoscalingGroup
    Condition: "BuildJenkins"
    Properties:
      Cluster: !Ref JenkinsCluster
      DesiredCount: "1"
      Role: !ImportValue ECSServiceRoleArn
      TaskDefinition: !Ref JenkinsTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      LoadBalancers:
        -
          ContainerName: "jenkins"
          ContainerPort: "8080"
          TargetGroupArn: !Ref JenkinsALBTargetGroup


Outputs:
  ClusterName:
    Value: !Ref JenkinsCluster
    Export:
      Name: JenkinsCluster
  JenkinsALBTargetGroup:
    Value: !Ref JenkinsALBTargetGroup
    Export:
      Name: JenkinsALBTargetGroup
  JenkinsTaskDefinition:
    Value: !Ref JenkinsTaskDefinition
    Export:
      Name: JenkinsTaskDefinition
  JenkinsPassword:
    Value: !Ref AdministratorPassword
    Export:
      Name: JenkinsPassword
  S3BucketName:
    Value: !Ref S3BucketName
    Export:
      Name: S3BucketName
  S3PathPrefix:
    Value: !Ref S3PathPrefix
    Export:
      Name: S3PathPrefix
  LabName:
    Value: !Ref LabName
    Export:
      Name: LabName
