Description: "Running Container-Enabled Microservices on AWS Bootcamp: Lab 2 - CLI Instance CloudFormation Template"
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMI: "ami-c481fad3"
    us-west-2:
      AMI: "ami-b04e92d0"
    eu-west-1:
      AMI: "ami-d41d58a7"
    us-east-2:
      AMI: "ami-71ca9114"

Parameters:
  InstanceType:
    Type: "String"
    Description: "CLI instance type"
    Default: "t2.medium"
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: "must be a valid t2 instance type."

  SourceCidr:
    Type: "String"
    Description: "Optional - CIDR/IP range for instance outside access - defaults to 0.0.0.0/0"
    Default: "0.0.0.0/0"

  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances."

  S3BucketName:
    Type: "String"
    Description: "Name of the S3 bucket where the source code is stored."

  S3PathPrefix:
    Type: "String"
    Description: "S3 Path where source and scripts are found for the lab."

  LabName:
    Type: "String"
    Description: "The name of the lab"
    ConstraintDescription: "must be a valid lab name."
    Default: "lab-2-pipeline"
    AllowedValues:
      - lab-1-microservices
      - lab-2-pipeline
      - lab-3-scale
      - lab-4-security

Resources:
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: CLI Instance Security Group
      VpcId: !ImportValue VPC
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: !Ref SourceCidr

  InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["ec2.amazonaws.com"] },
              "Action": ["sts:AssumeRole"]
            }
          ]
        }
      Path: "/"
      Policies:
        -
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "*"
                  ],
                  "Resource": [
                      "*"
                  ]
                }
              ]
            }
          }

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          !Ref InstanceRole

  SysLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 7

  CloudformationLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 7

  DockerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 7

  CLIInstance:
    Type: "AWS::EC2::Instance"
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          install_all:
            - install_cfn
            - install_logs
            - install_ssm
            - install_docker
            - install_docker_login_helper
            - setup_aws_cli
            - install_src
            - setup_git
            - pull_docker_images
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              group: "root"
              owner: "root"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.CLIInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource CLIInstance --configsets install_all --region ${AWS::Region}
                runas=root
              group: root
              mode: '000400'
              owner: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_logs:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/awslogs/state/agent-state

                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${SysLogGroup}
                log_stream_name = {instance_id}/syslog
                datetime_format = %b %d %H:%M:%S

                [/var/log/docker]
                file = /var/log/docker
                log_group_name = ${DockerLogGroup}
                log_stream_name = {instance_id}/docker.log
                datetime_format = %Y-%m-%dT%H:%M:%S.%fZ

                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cloud-init.log
                datetime_format =

                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cloud-init-output.log
                datetime_format =

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cfn-init.log
                datetime_format =

                [/var/log/cfn-init-cmd.log]
                file = /var/log/cfn-init-cmd.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cfn-init-cmd.log
                datetime_format =

                [/var/log/cfn-hup.log]
                file = /var/log/cfn-hup.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cfn-hup.log
                datetime_format =

                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = ${CloudformationLogGroup}
                log_stream_name = {instance_id}/cfn-wire.log
                datetime_format =
              group: root
              mode: '000644'
              owner: root
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              group: root
              mode: '000644'
              owner: root
          commands:
            01_create_state_directory:
              command: "mkdir -p /var/awslogs/state"
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                files:
                  - "/etc/awslogs/awslogs.conf"
        install_ssm:
          commands:
            01_install_agent:
              command: !Sub |
                curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o /tmp/amazon-ssm-agent.rpm && yum install -y /tmp/amazon-ssm-agent.rpm
        install_docker:
          packages:
            yum:
              docker: []
          commands:
            01_add_docker_user_group:
              command: "usermod -a -G docker ec2-user"
            02_start_docker:
              command: "service docker start"
        install_docker_login_helper:
          sources:
            /var/lib/amazon-ecr-credential-helper: "https://github.com/awslabs/amazon-ecr-credential-helper/tarball/v0.1.0"
          files:
            /home/ec2-user/.docker/config.json:
              content: !Sub |
                {
                  "credsStore": "ecr-login"
                }
              mode: "000644"
              owner: "ec2-user"
              group: "ec2-user"
          commands:
            01_change_owner:
              command: chown -R ec2-user:ec2-user /var/lib/amazon-ecr-credential-helper && chown -R ec2-user:ec2-user /home/ec2-user/.docker
            02_build_ecr_credential_helper:
              command: su - ec2-user -c "cd /var/lib/amazon-ecr-credential-helper && make docker"
            03_move_credential_binary:
              command: cp /var/lib/amazon-ecr-credential-helper/bin/local/docker-credential-ecr-login /usr/local/bin/
        setup_aws_cli:
          commands:
            00_use_the_pip_awscli:
              command: pip install --upgrade awscli
            01_configure_default_region:
              command: !Sub su - ec2-user -c "aws configure set default.region ${AWS::Region}"
            02_configure_completer:
              command: echo "complete -c '/usr/bin/aws_completer' aws" | tee -a /home/ec2-user/.bash_profile
            03_install_boto3:
              command: pip install boto3
        install_src:
          packages:
            yum:
              jq: []
          sources:
            /home/ec2-user: !Sub https://aws-tc-largeobjects.s3.amazonaws.com/AWS-300-RCM/3.0/${LabName}-src.tar.gz
          commands:
            01_change_owner:
              command: !Sub chown -R ec2-user:ec2-user /home/ec2-user/${LabName}
            02_chmod_files:
              command: !Sub find /home/ec2-user/${LabName} -type d -exec chmod 775 {} \; && find /home/ec2-user/${LabName} -type f -exec chmod 664 {} \; && chmod 775 /home/ec2-user/${LabName}/scripts/*.sh
        setup_git:
          packages:
            yum:
              git: []
          files:
            /home/ec2-user/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}
              mode: "000644"
              owner: "ec2-user"
              group: "ec2-user"
          commands:
            01_setup_local_git_repo:
              command: su - ec2-user -s /bin/sh -c "git config --global credential.helper '!aws codecommit credential-helper $@' && git config --global credential.UseHttpPath true"
            02_configure_git:
              command: su - ec2-user -s /bin/sh -c "git config --global user.name \"awsstudent\" && git config --global user.email awsstudent@example.com"
        pull_docker_images:
          commands:
            01_pull_images:
              command: docker pull awsbootcamp/mustachemebase && docker pull awsbootcamp/jenkins
    Properties:
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AMI ]
      NetworkInterfaces:
        -
          GroupSet:
            - !Ref SecurityGroup
          AssociatePublicIpAddress: true
          DeviceIndex: "0"
          DeleteOnTermination: true
          SubnetId: !ImportValue PublicSubnet1
      BlockDeviceMappings:
        -
          DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: "50"
            VolumeType: "gp2"
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        -
          Key: "Name"
          Value: "CLI Instance"
      UserData:
        Fn::Base64: !Sub |
         #!/bin/bash -xe
         yum update -y
         /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource CLIInstance --configsets install_all --region ${AWS::Region}
         /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource CLIInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: "PT15M"

Outputs:
  PublicDnsName:
    Value: !GetAtt CLIInstance.PublicDnsName
    Export:
      Name: CLIInstanceDnsName
